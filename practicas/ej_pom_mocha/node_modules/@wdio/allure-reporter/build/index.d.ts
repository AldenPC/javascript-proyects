export default AllureReporter;
declare class AllureReporter extends WDIOReporter {
    static addFeature: (featureName: (string)) => void;
    static addLabel: (name: string, value: string) => void;
    static addSeverity: (severity: string) => void;
    static addIssue: (issue: string) => void;
    static addTestId: (testId: string) => void;
    static addStory: (storyName: string) => void;
    static addEnvironment: (name: string, value: string) => void;
    static addDescription: (description: string, descriptionType: string) => void;
    static addAttachment: (name: string, content: any, type: any) => void;
    static startStep: (title: string) => void;
    static endStep: (status?: any) => void;
    static addStep: (title: string, { content, name, type }?: {
        content: string;
        name?: string | undefined;
        type?: string | undefined;
    } | undefined, status?: string | undefined) => void;
    static addArgument: (name: string, value: string) => void;
    constructor(options: any);
    config: {};
    capabilities: {};
    allure: any;
    lastScreenshot: any;
    registerListeners(): void;
    isMultiremote: any;
    setCaseParameters(cid: any): void;
    getLabels({ tags }: {
        tags: any;
    }): any[];
    addLabel({ name, value }: {
        name: any;
        value: any;
    }): false | undefined;
    addStory({ storyName }: {
        storyName: any;
    }): false | undefined;
    addFeature({ featureName }: {
        featureName: any;
    }): false | undefined;
    addSeverity({ severity }: {
        severity: any;
    }): false | undefined;
    addIssue({ issue }: {
        issue: any;
    }): false | undefined;
    addTestId({ testId }: {
        testId: any;
    }): false | undefined;
    addEnvironment({ name, value }: {
        name: any;
        value: any;
    }): false | undefined;
    addDescription({ description, descriptionType }: {
        description: any;
        descriptionType: any;
    }): false | undefined;
    addAttachment({ name, content, type }: {
        name: any;
        content: any;
        type?: string | undefined;
    }): false | undefined;
    startStep(title: any): false | undefined;
    endStep(status: any): false | undefined;
    addStep({ step }: {
        step: any;
    }): false | undefined;
    addArgument({ name, value }: {
        name: any;
        value: any;
    }): false | undefined;
    isAnyTestRunning(): any;
    isScreenshotCommand(command: any): boolean;
    dumpJSON(name: any, json: any): void;
    attachScreenshot(): void;
}
import WDIOReporter from "@wdio/reporter";
//# sourceMappingURL=index.d.ts.map